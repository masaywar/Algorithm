#프로젝트 오일러 문제 1번부터 10번까지
from functools import reduce


#1번
def Problem1():
    """
    Multiples of 3 and 5
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these
    multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
    :return: 
    """
    result = 0 # 3과 5의 배수의 합 저장
    for k in range(1000):
        if k % 3 == 0 or k % 5 == 0: # 3과 5의 배수임을 동시에 체크
            result += k

    return result


#2번 문제
def Problem2():
    """
    Even Fibonacci numbers
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
    the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci
    sequence whose valuezs do not exceed four million, find the sum of the even-valued terms.
    :return:
    """
    #피보나치 수열 만들기
    a, b = 1, 1
    even_num = 0 #피보나치 수열이 2로 나누어질때(짝수) 추가
    while b < 4000000:
        if b % 2 == 0:
            even_num += b
        a, b = b, a+b
    print(even_num)


def Problem3():
    """
    Largest prime factor
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
    :return:
    """
    # 1.소인수 분해가 필요할듯?

    N = 600851475143
    L = set()
    k = 2

    while N != 1:
        while N % k == 0: # 2로 계속 나누다가 다 나누면 3으로, 5 ..... 끝까지 나누면 가장 큰 소수가 되는 값이 답일 것
            L.add(k)      # 더 이상 k로 안나누어 질때 까지 나눈다 -> k가 소수 -> 소인수 분해와 같은 원리
            N //= k
        k += 1

    print(L)


def Problem4():
    """
    Largest palindrome product
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit
    numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two 3-digit numbers.
     :return:
    """

    max = 0
    for x in range(100, 999):
        for y in range(100, 999):
            res = x * y
            if str(x*y) == str(x*y)[::-1] and res > max:
                max = res
    return max


def Problem5():
    """
    Smallest multiple
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    :return:
    """
    L = [x for x in range(1, 21)]
    divider = 2
    divider_list = []
    while divider < 20:
        idx_list = []
        for k in range(len(L)):
            if L[k] % divider == 0:
                idx_list.append(k)
        if len(idx_list) > 1:
            for k in range(len(L)):
                if L[k] % divider == 0:
                    L[k] = L[k] // divider
            divider_list.append(divider)
        else:
            divider += 1
    L = L + divider_list
    res = reduce(lambda x, y: x*y, L)
    return res


def Problem6():
    """
    Sum square difference
    The sum of the squares of the first ten natural numbers is,
    1**2 + 2**2 + ... + 10**2 = 385
    The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)**2 = 55**2 = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
    3025 − 385 = 2640. Find the difference between the sum of the squares of the first one hundred natural numbers and
    the square of the sum.
    :return:
    """

    N = 100
    sum_of_square = 0
    square_of_sum = 0
    for k in range(1, N+1):
        sum_of_square += k**2
        square_of_sum += k

    return square_of_sum**2 - sum_of_square


def Problem7():
    """
    10001st prime
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10 001st prime number?
    :return:
    """
    primes = [2]
    N = 1500000
    count = 1

    def is_prime(n):
        if n == 0 or n == 1:
            return False
        elif n == 2 or n == 3:
            return True
        for k in range(2, int(n**0.5)+1):
            if n % k == 0:
                return False
        return True

    for k in range(3, N, 2):
        if is_prime(k):
            count += 1
            primes.append(k)

        if count == 10001:
            return primes[-1]


def Problem8():
    """
    Largest product in a series
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450

    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
    What is the value of this product?
    """
    
    with open("Problem8.txt", "r") as f:
        L = f.readlines()
        string = ""
        for k in L:
            string += k.rstrip()

    count = 0
    res = 1
    res_max = 0
    idx = 0
    
    while idx <= len(string)-13:
        k = string[idx + count]
        res *= int(k)
        count += 1
        if count == 13:
            if res > res_max:
                res_max = res
            res = 1
            count = 0
            idx += 1
    return res_max


def Problem9():
    """
    Special Pythagorean triplet
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

                a2 + b2 = c2

    For example, 32 + 42 = 9 + 16 = 25 = 52. There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product a*b*c.
    :return:
    """
    for k in range(1, 300):
        for j in range(k + 1, 600):
            if k*k + j*j == (1000 - k - j)**2:
                return k*j*(1000 - k - j)
    # a + b < c 이므로 a 는 1 에서 300, b는 a+1 에서 600으로 어림 잡을 수 있다. 만약 error가 발생한다면
    # a를 1에서 334, b를 a+1에서 667로 놓고 하면 될 듯


def Problem10():
    """
    Summation of primes
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
    :return:
    """
    i = 2
    N = 2000000
    L = [True] * N
    L[0], L[1] = False, False
    sum = 0
    while i**2 < N:
        k = i
        while k + i < N and L[i] is not False:
            if L[k+i] is not False:
                L[k+i] = False
            k += i

        i += 1 #에라토스테네스의 채

    for k in range(len(L)):
        if L[k] is True:
            sum += k
    return sum


if __name__ == "__main__":
    print(Problem8())