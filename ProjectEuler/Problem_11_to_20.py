from functools import reduce


def Problem11():
    """
    Largest product in a grid
    In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

        08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
        49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
        81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
        52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
        22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
        24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
        32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
        67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
        24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
        21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
        78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
        16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
        86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
        19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
        04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
        88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
        04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
        20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
        20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
        01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally)
    in the 20×20 grid?
    :return:
    """

    with open("Problem11.txt", "r") as f:
        L = f.readlines()
        for k in range(len(L)):
            L[k] = L[k].rstrip()
            L[k] = L[k].split(" ")
            for j in range(len(L[k])):
                L[k][j] = int(L[k][j])

    return max(
        max([
            [L[k][j] * L[k][j + 1] * L[k][j + 2] * L[k][j + 3] for k in range(20) for j in range(17)],
            [L[k][j] * L[k+1][j] * L[+2][j] * L[k+3][j] for k in range(17) for j in range(20)],
            [L[k][j] * L[k+1][j+1] * L[k+2][j+2] * L[k+3][j+3] for k in range(17) for j in range(17)],
            [L[k+3][j] * L[k+2][j+1] * L[k+1][j+2] * L[k][j+3] for k in range(17) for j in range(17)]
    ]))


def Problem12():
    """
    Highly divisible triangular number
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    The first ten terms would be : 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
    :return:
    """

    divisors = 0
    count = 1
    num = 0

    while divisors < 500:
        divisors = 0
        num = reduce(lambda x, y: x + y, range(count + 1))
        for k in range(1, int(num**0.5)+1):
            if num % k == 0:
                divisors += 1
                if num//k != k:
                    divisors += 1
        count += 1

    return num


def Problem13():
    """
    Large sum
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    :return:
    """
    sum = 0
    with open("Problem13.txt", "r") as f:
        L = f.readlines()
        idx = 0
        for k in L:
            L[idx] = k.rstrip()
            sum += int(L[idx])
            idx += 1

    return str(sum)[:10]


def Problem14():
    """
    Longest Collatz sequence
    The following iterative sequence is defined for the set of positive integers:

    n → n/2 (n is even)
    n → 3n + 1 (n is odd)

    Using the rule above and starting with 13, we generate the following sequence:

    13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

    It can be seen that this sequence (starting at 13 and finishing at 1)
    contains 10 terms. Although it has not been proved yet (Collatz Problem),
    it is thought that all starting numbers finish at 1.

    Which starting number, under one million, produces the longest chain?

    NOTE: Once the chain starts the terms are allowed to go above one million.
    """
    longest_chain = 0
    lc_num = 0

    for k in range(999999, 0, -1):
        num = k
        chain = 1
        while num != 1:
            if num % 2 == 0:
                num //= 2
            else:
                num = 3*num + 1
            chain += 1

        if longest_chain < chain:
            longest_chain = chain
            lc_num = k

    return lc_num


def Problem15():
    """
    Lattice paths
    Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down,
    there are exactly 6 routes to the bottom right corner.

    How many such routes are there through a 20×20 grid?
    """
    L = [[1 for _ in range(21)] for _ in range(21)]
    idx = 0
    while idx != 20:
        for k in range(1,21):
            L[k][1+idx] = L[k-1][1+idx] + L[k][idx]
        idx += 1
    # 각 가로, 세로 첫 번쨰 인덱스를 1로 맞춘다음  (1,1) 부터 x축 y축 각 인덱스를
    # 1 씩 줄인 값을 합친 값을 어사인해가며 구한다.

    return L[20][20]


def Problem16():
    """
    Power digit sum
    2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    What is the sum of the digits of the number 2^1000?
    :return:
    """

    return reduce(lambda x, y: int(x) + int(y), str(2**1000))


def Problem17():
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19
    letters used in total. If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words,
    how many letters would be used?

    NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115
    (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with
    British usage.

    :return:
    """

    cipher = ["thousand", "hundred"]
    number = ["", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven"
              , "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]

    two_num = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]

    total_letters = 0

    for k in range(1, 1001):
        str_k = str(k)
        res_string = ""
        if len(str_k) > 3:
            res_string = "one" + cipher[0]
        elif k >= 100:
            res_string = number[int(str_k[0])] + cipher[1]
            if k % 100 == 0:
                pass
            elif int(str_k[1]) >= 2:
                res_string += "and" + two_num[int(str_k[1])] + number[int(str_k[2])]
            else:
                res_string += "and" + number[int(str_k[1]+str_k[2])]
        else:
            if int(str_k[0]) >= 2 and len(str_k) > 1:
                res_string += two_num[int(str_k[0])] + number[int(str_k[1])]
            else:
                res_string += number[int(str_k[0])] if len(str_k) <= 1 else number[int(str_k[0] + str_k[1])]
        total_letters += len(res_string)

    return total_letters
    # k를 각 자릿수로 슬라이스 하고 자릿수에 헤당하는 숫자들을 리스트의 인덱스에 넣으면 해당 스트링이
    # 튀어 나온다. 모든 스트링을 합하고 그 길이를 더한 값을 리턴


def Problem18():
    """
    Maximum path sum I
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
                3
               7 4
              2 4 6
             8 5 9 3
    That is, 3 + 7 + 4 + 9 = 23.
    Find the maximum total from top to bottom of the triangle below:
                                                    75
                                                   95 64
                                                 17 47 82
                                                18 35 87 10
                                               20 04 82 47 65
                                              19 01 23 75 03 34
                                             88 02 77 73 07 63 67
                                           99 65 04 28 06 16 70 92
                                         41 41 26 56 83 40 80 70 33
                                        41 48 72 33 47 32 37 16 94 29
                                       53 71 44 65 25 43 91 52 97 51 14
                                     70 11 33 28 77 73 17 78 39 68 17 57
                                    91 71 52 38 17 14 91 43 58 50 27 29 48
                                  63 66 04 68 89 53 67 30 73 16 69 87 40 31
                                 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

    NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However,
    Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force,
    and requires a clever method! ;o)

    :return:
    """

    with open("Problem67.txt", "r") as f:
        T = f.readlines()
        for k in range(len(T)):
            T[k] = T[k].rstrip()
            T[k] = T[k].split(" ")

    for k in range(1, len(T)):
        for j in range(len(T[k])):
            if j not in (0, len(T[k])-1):
                T[k][j] = int(T[k][j]) + max(int(T[k-1][j]), int(T[k-1][j-1]))
            else:
                T[k][j] = int(T[k][j]) + int(T[k-1][j]) if j == 0 else int(T[k][j]) + int(T[k-1][j-1])

    return max(T[len(T)-1])


def Problem19():
    """
    Counting Sundays
    You are given the following information, but you may prefer to do some research for yourself.
        1. 1 Jan 1900 was a Monday.

        2. Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone,
           Which has twenty-eight, rain or shine. And on leap years, twenty-nine.

        3. A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.

    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    :return:
    """

    res, year, month, day, count, leap = 0, 1900, 1, 1, 0, False
    weak = ["Mon", "Tue", "Wen", "Thu", "Fri", "Sat", "Sun"]
    Now = [year, month, day, weak[count]]
    while Now[:3] != [2001, 1, 1]:
        leap = False
        day, count = day+1, count+1
        if year % 4 == 0:
            leap = True
            if year % 100 == 0 and year % 400 != 0:
                leap = False

        if Now[2:] == [1, weak[-1]] and year != 1900:
            res += 1

        if count >= 7:
            count = 0

        if (month in [1,3,5,7,8,10,12] and day > 31) or (month in [4,6,9,11] and day > 30)\
                or (month == 2 and ((leap is False and day > 28) or (leap is True and day > 29))):
            month, day = month + 1, 1

        if month > 12:
            year, month = year+1, 1

        Now = [year, month, day, weak[count]]

    return res


def Problem20():
    """
    Factorial digit sum
    n! means n × (n − 1) × ... × 3 × 2 × 1
    For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
    and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
    Find the sum of the digits in the number 100!
    :return:
    """

    return reduce(lambda x, y: int(x) + int(y), str(reduce(lambda x, y: x * y, range(1, 101))))


if __name__ == "__main__":
    print(Problem20())